<templates>
    <!-- INSPECTOR -->
    <devtools-panel class="inspector" t-name="InspectorComponent" t-att-class="{active: props.isOpen}"
        t-on-node-selected="selectNode"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <devtools-mainpane>
                <mainpane-contents>
                    <devtools-tree>
                        <TreeComponent
                            vNode="domEngine.root"
                            isRoot="true"
                            selectedPath="getPath(selectedNode)"
                            selectedID="state.selectedID"/>
                    </devtools-tree>
                </mainpane-contents>
                <PathComponent
                    path="getPath(selectedNode)"
                    selectedID="state.selectedID"/>
            </devtools-mainpane>
            <devtools-sidepane>
                <InfoComponent vNode="selectedNode"/>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <!-- INSPECTOR.Tree -->
    <devtools-node t-name="TreeComponent"
        t-att-class="{
            block: props.vNode.length and !props.vNode.char,
            folded: state.folded,
            root: props.isRoot,
            'self-closing': !props.vNode.hasChildren(),
        }"
        tabindex="1"
        t-on-keydown="onKeydown"
        t-on-node-selected="selectNode">
        <t t-if="props.isRoot">
            <devtools-nodename class="selectable-line block"
                t-on-click="onClickNode" t-on-dblclick="onDblClickNode"
                t-att-class="{
                    selected: props.selectedID == props.vNode.id,
                }">root</devtools-nodename>
            <t t-call="treeChildren"/>
        </t>
        <t t-else="">
            <devtools-nodename t-if="!props.vNode.tangible"
                t-on-click="onClickNode" t-on-dblclick="onDblClickNode"
                class="selectable-line inline marker-node" t-att-class="{
                    selected: props.selectedID == props.vNode.id,
                }">
                <b><t t-esc="repr()"/></b>
            </devtools-nodename>
            <devtools-nodename t-elif="props.vNode.char" t-on-click="onClickNode"
                t-on-dblclick="onDblClickNode"
                class="selectable-line inline" t-att-class="{
                    bold: isFormat(props.vNode, 'b'),
                    italic: isFormat(props.vNode, 'i'),
                    underline: isFormat(props.vNode, 'u'),
                    link: isFormat(props.vNode, 'link'),
                    subscript: isFormat(props.vNode, 'subscript'),
                    superscript: isFormat(props.vNode, 'superscript'),
                    selected: props.selectedID == props.vNode.id,
                }">
                <t t-esc="repr()"/>
            </devtools-nodename>
            <t t-else="">
                <devtools-nodename class="selectable-line block" t-on-click="onClickNode"
                    t-on-dblclick="onDblClickNode"
                    t-att-class="{
                        bold: isFormat(props.vNode, 'b'),
                        italic: isFormat(props.vNode, 'i'),
                        underline: isFormat(props.vNode, 'u'),
                        link: isFormat(props.vNode, 'link'),
                        subscript: isFormat(props.vNode, 'subscript'),
                        superscript: isFormat(props.vNode, 'superscript'),
                        selected: props.selectedID == props.vNode.id,
                        'line-break': props.vNode.htmlTag === 'BR',
                    }">
                    <t t-esc="repr()"/>
                </devtools-nodename>
                <t t-call="treeChildren"/>
            </t>
        </t>
    </devtools-node>

    <t t-name="treeChildren">
        <devtools-children>
            <TreeComponent t-if="!state.folded"
                t-foreach="props.vNode.childVNodes.slice()" t-as="child"
                t-key="child.id"
                vNode="child"
                selectedPath="props.selectedPath"
                selectedID="props.selectedID"/>
        </devtools-children>
    </t>

    <!-- INSPECTOR.Path -->
    <devtools-path t-name="PathComponent">
        <devtools-pathnode t-foreach="props.path" t-as="vNode"
            t-key="vNode.id"
            t-att-class="{
                selected: vNode.id == props.selectedID
            }"
            t-on-click="selectNode(vNode)">
            <t t-esc="getNodeRepr(vNode)"/>
        </devtools-pathnode>
    </devtools-path>

    <!-- INSPECTOR.Info -->
    <devtools-info t-name="InfoComponent">
        <devtools-navbar>
            <devtools-button t-on-click="openTab('vNode')" t-att-class="{
                selected: state.currentTab == 'vNode',
            }">VNode</devtools-button>
            <devtools-button t-on-click="openTab('selection')" t-att-class="{
                selected: state.currentTab == 'selection',
            }">Selection</devtools-button>
        </devtools-navbar>
        <t t-call="infoVNode" t-if="state.currentTab == 'vNode'"/>
        <t t-call="infoSelection" t-if="state.currentTab == 'selection'"/>
    </devtools-info>

    <!-- INSPECTOR.Info.vNode -->
    <t t-name="infoVNode">
        <devtools-about>
            <devtools-type><t t-esc="className(props.vNode)"/></devtools-type> <t t-esc="props.vNode.name"/>
            <t t-if="props.vNode.char">:
                "<t t-esc="props.vNode.char"/>"
            </t>
            <devtools-button class="logger" t-on-click="logVNode(props.vNode)">&gt;_</devtools-button>
            <devtools-id><t t-esc="props.vNode.id"/></devtools-id>
        </devtools-about>
        <devtools-properties>
            <devtools-infotitle>ðŸ‘¤ About me</devtools-infotitle>
            <devtools-table>
                <devtools-tbody>
                    <devtools-tr t-foreach="aboutMeProps" t-as="propName" t-key="propName_index">
                        <devtools-td><t t-esc="propName"/></devtools-td>
                        <devtools-td><t t-esc="propRepr(props.vNode, propName)"/></devtools-td>
                    </devtools-tr>
                    <devtools-tr>
                        <devtools-td>total length</devtools-td>
                        <devtools-td><t t-esc="totalLength(props.vNode)"/></devtools-td>
                    </devtools-tr>
                    <devtools-tr>
                        <devtools-td>text content</devtools-td>
                        <devtools-td><t t-esc="props.vNode.textContent"/></devtools-td>
                    </devtools-tr>
                </devtools-tbody>
            </devtools-table>
            <devtools-infotitle>ðŸ“– My Properties</devtools-infotitle>
            <devtools-table>
                <devtools-tbody>
                    <devtools-tr t-foreach="nodeProperties(props.vNode)" t-as="prop" t-key="prop_index">
                        <devtools-td><t t-esc="prop.key"/></devtools-td>
                        <devtools-td><t t-esc="prop.value"/></devtools-td>
                    </devtools-tr>
                </devtools-tbody>
            </devtools-table>
            <devtools-infotitle>ðŸ‘ª My Family</devtools-infotitle>
            <devtools-table>
                <devtools-tbody>
                    <devtools-tr t-foreach="familyProps" t-as="propName"
                    t-key="propName_index">
                        <devtools-td><t t-esc="propName"/></devtools-td>
                        <devtools-td t-if="propName === 'parent'" t-on-click="selectNode(props.vNode.parent)">
                            <t t-esc="propRepr(props.vNode, propName)"/>
                        </devtools-td>
                        <devtools-td t-elif="propName === 'siblings'">
                            <devtools-list>
                                <devtools-listitem t-if="props.vNode.previousSibling()"
                                    t-on-click="selectNode(props.vNode.previousSibling())">
                                    previous: <t t-esc="props.vNode.previousSibling().name"/>
                                </devtools-listitem>
                                <devtools-listitem t-else="">previous: none</devtools-listitem>
                                <devtools-listitem t-if="props.vNode.nextSibling()"
                                    t-on-click="selectNode(props.vNode.nextSibling())">
                                    next: <t t-esc="props.vNode.nextSibling().name"/>
                                </devtools-listitem>
                                <devtools-listitem t-else="">next: none</devtools-listitem>
                            </devtools-list>
                        </devtools-td>
                        <devtools-td t-elif="propName === 'children'">
                            <devtools-list t-if="props.vNode.childVNodes.length">
                                <devtools-listitem t-foreach="props.vNode.children()"
                                    t-as="child" t-key="child.id"
                                    t-on-click="selectNode(child)">
                                    <t t-esc="child.name"/>
                                </devtools-listitem>
                            </devtools-list>
                            <t t-else="">none</t>
                        </devtools-td>
                        <devtools-td t-else=""><t t-esc="propRepr(props.vNode, propName)"/></devtools-td>
                    </devtools-tr>
                </devtools-tbody>
            </devtools-table>
        </devtools-properties>
    </t>

    <!-- INSPECTOR.Info.selection -->
    <t t-name="infoSelection">
        <devtools-about>
            <devtools-type>VSelection</devtools-type> Selection
        </devtools-about>
        <devtools-properties>
            <devtools-infotitle>ðŸ‘¤ About me</devtools-infotitle>
            <devtools-table>
                <devtools-tbody>
                    <devtools-tr>
                        <devtools-td>direction</devtools-td>
                        <devtools-td><t t-esc="env.editor.selection.direction"/></devtools-td>
                    </devtools-tr>
                    <devtools-tr>
                        <devtools-td><strong class="marker-node">[</strong> anchor</devtools-td>
                        <devtools-td><t t-esc="_repr(env.editor.selection.anchor)"/></devtools-td>
                    </devtools-tr>
                    <devtools-tr>
                        <devtools-td><strong class="marker-node">]</strong> focus</devtools-td>
                        <devtools-td><t t-esc="_repr(env.editor.selection.focus)"/></devtools-td>
                    </devtools-tr>
                </devtools-tbody>
            </devtools-table>
        </devtools-properties>
    </t>

    <devtools-panel t-name="CommandsComponent"
        t-att-class="{active: props.isOpen}" tabindex="1"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <t t-set="selectedCommandImplementations" t-value="state.registry[state.selectedCommandIdentifier]"/>
            <devtools-mainpane style="overflow: hidden">
                <devtools-navbar>
                    <devtools-button t-on-click="openTab('queue')" t-att-class="{
                        selected: state.currentTab == 'queue',
                    }">Queue</devtools-button>
                    <devtools-button t-on-click="openTab('registry')" t-att-class="{
                        selected: state.currentTab == 'registry',
                    }">Registry</devtools-button>
                </devtools-navbar>
                <mainpane-contents t-if="state.currentTab == 'queue'" style="overflow: auto">
                    <devtools-table style="width: 100%;">
                        <devtools-tbody>
                            <devtools-tr t-foreach="Array.from(props.commands.keys()).reverse()" t-as="commandIndex"
                                t-key="commandIndex_index" class="selectable-line"
                                t-att-class="{
                                    selected: state.selectedCommandIndex == commandIndex,
                                }"
                                t-on-click="selectCommandByIndex(commandIndex)">
                                <devtools-td class="numbering"><t t-esc="commandIndex + 1"/></devtools-td>
                                <devtools-td><t t-esc="props.commands[commandIndex][0]"/></devtools-td>
                            </devtools-tr>
                        </devtools-tbody>
                    </devtools-table>
                </mainpane-contents>
                <mainpane-contents t-elif="state.currentTab == 'registry'" style="overflow: auto">
                    <devtools-command t-foreach="Object.keys(state.registry).sort()" t-as="commandIdentifier"
                        t-key="record_index" class="selectable-line"
                        t-att-class="{
                            selected: state.selectedCommandIdentifier == commandIdentifier,
                        }"
                        t-on-click="selectCommand(commandIdentifier)">
                        <t t-esc="commandIdentifier"/>
                    </devtools-command>
                </mainpane-contents>
            </devtools-mainpane>
            <devtools-sidepane>
                <devtools-info t-if="state.currentTab == 'queue'">
                    <t t-set="selectedCommand" t-value="props.commands[state.selectedCommandIndex]"/>
                    <devtools-about t-if="selectedCommand">
                        <devtools-type>Command</devtools-type> <t t-esc="selectedCommand[0]"/>
                    </devtools-about>
                    <devtools-properties t-if="selectedCommand">
                        <devtools-infotitle>Arguments</devtools-infotitle>
                        <devtools-properties>
                            <t t-if="selectedCommand">
                                <t t-set="payload" t-value="selectedCommand[1]"/>
                                <t t-call="commandArgs"/>
                            </t>
                            <t t-call="selectedCommandTable"/>
                        </devtools-properties>
                    </devtools-properties>
                </devtools-info>
                <devtools-info t-elif="state.currentTab == 'registry'">
                    <t t-if="state.registry">
                        <devtools-about t-if="state.selectedCommandIdentifier">
                            <devtools-type>Command</devtools-type> <t t-esc="state.selectedCommandIdentifier"/>
                        </devtools-about>
                        <devtools-properties t-if="state.selectedCommandIdentifier">
                            <t t-call="selectedCommandTable"/>
                        </devtools-properties>
                    </t>
                </devtools-info>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <t t-name="commandArgs">
        <devtools-table t-if="payload">
            <devtools-tbody>
                <t t-foreach="Object.keys(payload)" t-as="key" t-key="key_index">
                    <devtools-tr t-if="key !== 'context'">
                        <t t-set="value" t-value="payload[key]"/>
                        <devtools-td>
                            <t t-esc="key"/>
                        </devtools-td>
                        <devtools-td>
                            <t t-if="value and key == 'vSelection'" t-call="payloadVSelection"/>
                            <t t-else=""><t t-esc="formatPayloadValue(value)"/></t>
                        </devtools-td>
                    </devtools-tr>
                </t>
            </devtools-tbody>
        </devtools-table>
        <p t-else="">None</p>
    </t>

    <t t-name="payloadVSelection">
        <devtools-table>
            <devtools-tbody>
                <devtools-tr>
                    <devtools-td>
                        direction
                    </devtools-td>
                    <devtools-td>
                        <t t-esc="value.direction or 'unset'"/>
                    </devtools-td>
                </devtools-tr>
                <devtools-tr>
                    <devtools-td>
                        anchor
                    </devtools-td>
                    <devtools-td>
                        <t t-esc="value.anchorPosition"/> <t t-esc="value.anchorNode.id"/> (<t t-esc="value.anchorNode.name"/>)
                    </devtools-td>
                </devtools-tr>
                <devtools-tr>
                    <devtools-td>
                        focus
                    </devtools-td>
                    <devtools-td>
                        <t t-esc="value.focusPosition"/> <t t-esc="value.focusNode.id"/> (<t t-esc="value.focusNode.name"/>)
                    </devtools-td>
                </devtools-tr>
            </devtools-tbody>
        </devtools-table>
    </t>

    <t t-name="selectedCommandTable">
        <devtools-infotitle>Command definitions</devtools-infotitle>
        <devtools-table t-if="selectedCommandImplementations">
            <devtools-tbody>
                <devtools-tr t-foreach="selectedCommandImplementations"
                    t-as="selectedCommandImplementation" t-key="selectedCommandImplementation_index"
                    class="selectable-line"
                    t-att-class="{
                        selected: state.selectedCommandImplementationIndex == handlerIndex,
                    }">
                    <devtools-td><t t-esc="selectedCommandImplementation.handler.name"/></devtools-td>
                    <devtools-td><t t-esc="selectedCommandImplementation.handler"/></devtools-td>
                </devtools-tr>
            </devtools-tbody>
        </devtools-table>
        <p t-else="">None</p>
        <t t-set="mappings" t-value="matchingMappings(state.selectedCommandIdentifier)"/>
        <t t-if="mappings.length">
            <devtools-infotitle>Shortcuts</devtools-infotitle>
            <devtools-table>
                <devtools-tbody>
                    <devtools-tr t-foreach="mappings" t-as="mapping" t-key="mapping_index">
                        <devtools-td style="width: 50%;"><t t-esc="stringifyPattern(mapping.pattern)"/></devtools-td>
                        <devtools-td><t t-esc="argsRepr(mapping.configuredCommand.commandArgs)"/></devtools-td>
                    </devtools-tr>
                </devtools-tbody>
            </devtools-table>
        </t>
    </t>

    <!-- SHORTCUTS -->
    <devtools-panel t-name="ShortcutsComponent"
        t-att-class="{active: props.isOpen}" tabindex="1"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <devtools-mainpane style="overflow: hidden">
                <mainpane-contents style="overflow: auto">
                    <devtools-table>
                        <devtools-tr t-foreach="mappings" t-as="mapping" t-key="mapping_index" class="selectable-line">
                            <devtools-td><t t-esc="stringifyPattern(mapping.pattern)"/></devtools-td>
                            <devtools-td><t t-esc="mapping.configuredCommand.commandId"/></devtools-td>
                            <devtools-td><t t-esc="argsRepr(mapping.configuredCommand.commandArgs)"/></devtools-td>
                        </devtools-tr>
                    </devtools-table>
                </mainpane-contents>
            </devtools-mainpane>
        </devtools-contents>
    </devtools-panel>

    <!-- PLUGINS -->
    <devtools-panel t-name="PluginsComponent"
        t-att-class="{active: props.isOpen}" tabindex="1">
        <devtools-contents t-if="props.isOpen">
            <devtools-mainpane style="overflow: hidden">
                <mainpane-contents style="overflow: auto">
                    <devtools-table>
                        <devtools-tr t-foreach="plugins" t-as="plugin" t-key="plugin_index" class="selectable-line">
                            <devtools-td><t t-esc="plugin"/></devtools-td>
                        </devtools-tr>
                    </devtools-table>
                </mainpane-contents>
            </devtools-mainpane>
        </devtools-contents>
    </devtools-panel>

    <!-- MODES -->
    <devtools-panel t-name="ModesComponent"
        t-att-class="{active: props.isOpen}" tabindex="1"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <devtools-mainpane style="overflow: hidden">
                <mainpane-contents style="overflow: auto">
                    <devtools-table>
                        <devtools-tr t-foreach="Object.values(modes)"
                            t-as="mode" t-key="mode.id"
                            class="selectable-line"
                            t-att-class="{
                                selected: state.selectedMode and state.selectedMode.id == mode.id,
                            }"
                            t-on-click="selectMode(mode.id)"
                            t-on-dblclick="setMode(mode.id)">
                            <devtools-td><t t-if="mode.id == state.currentMode.id">âœ…</t> <t t-esc="mode.id"/></devtools-td>
                        </devtools-tr>
                    </devtools-table>
                </mainpane-contents>
            </devtools-mainpane>
            <devtools-sidepane>
                <devtools-info>
                    <devtools-about t-if="state.selectedMode">
                        <devtools-type>Mode</devtools-type> <t t-esc="state.selectedMode.id"/>
                    </devtools-about>
                    <devtools-properties t-if="state.selectedMode">
                        <devtools-infotitle>ðŸ“– Rules</devtools-infotitle>
                        <t t-if="state.selectedMode">
                            <devtools-table>
                                <devtools-tbody>
                                    <devtools-tr
                                    t-foreach="state.selectedMode.rules"
                                    t-as="rule" t-key="rule.id"
                                    class="selectable-line">
                                        <devtools-td>
                                            <devtools-list>
                                                <devtools-listitem>Selector: <devtools-button t-on-click="logSelector(rule.selector)">&gt;_</devtools-button></devtools-listitem>
                                                <devtools-listitem t-foreach="Object.keys(rule.properties)"
                                                t-as="property"
                                                t-key="property_id">
                                                    <t t-esc="property"/>: <t t-esc="rule.properties[property].value"/>
                                                    <t t-if="rule.properties[property].cascading"> (cascading)</t>
                                                    <t t-else=""> (targeted)</t>
                                                </devtools-listitem>
                                            </devtools-list>
                                        </devtools-td>
                                    </devtools-tr>
                                </devtools-tbody>
                            </devtools-table>
                        </t>
                    </devtools-properties>
                </devtools-info>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <!-- MAIN -->
    <jw-devtools t-name="devtools"
        t-att-class="{
            closed: state.closed,
        }"
        t-attf-style="height: {{state.height}}px"
        tabindex="2">
        <devtools-navbar
            t-on-click="toggleClosed"
            t-on-mousedown="startResize"
            t-on-touchstart="startResize">
            <devtools-button t-on-click="openTab('inspector')" t-att-class="{
                selected: state.currentTab == 'inspector',
            }">Inspector</devtools-button>
            <devtools-button t-on-click="openTab('commands')" t-att-class="{
                selected: state.currentTab == 'commands',
            }">Commands</devtools-button>
            <devtools-button t-on-click="openTab('shortcuts')" t-att-class="{
                selected: state.currentTab == 'shortcuts',
            }">Shortcuts</devtools-button>
            <devtools-button t-on-click="openTab('plugins')" t-att-class="{
                selected: state.currentTab == 'plugins',
            }">Plugins</devtools-button>
            <devtools-button t-on-click="openTab('modes')" t-att-class="{
                selected: state.currentTab == 'modes',
            }">Modes</devtools-button>
            <devtools-button t-on-click="inspectDom()" title="Inspect document">&#128269;</devtools-button>
            <devtools-button t-on-click="toggleKeystrokes()" t-att-class="{
                selected: state.displayKeystrokes,
            }" title="Log keystrokes">ðŸ…º</devtools-button>
        </devtools-navbar>
        <t t-if="!state.closed">
            <InspectorComponent isOpen="state.currentTab == 'inspector'" t-ref="inspector"/>
            <CommandsComponent isOpen="state.currentTab == 'commands'"
                commands="state.commands"/>
            <ShortcutsComponent isOpen="state.currentTab == 'shortcuts'"/>
            <PluginsComponent isOpen="state.currentTab == 'plugins'"/>
            <ModesComponent isOpen="state.currentTab == 'modes'"/>
        </t>
    </jw-devtools>

</templates>
