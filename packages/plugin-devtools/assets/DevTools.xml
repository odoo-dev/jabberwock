<templates>
    <!-- INSPECTOR -->
    <devtools-panel class="inspector" t-name="InspectorComponent" t-att-class="{active: props.isOpen}"
        t-on-node-selected="selectNode"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <devtools-mainpane>
                <mainpane-contents>
                    <devtools-tree>
                        <TreeComponent
                            vNode="env.editor.vDocument.root"
                            isRoot="true"
                            selectedPath="getPath(selectedNode)"
                            selectedID="state.selectedNodeID"/>
                    </devtools-tree>
                </mainpane-contents>
                <PathComponent
                    path="getPath(selectedNode)"
                    selectedID="state.selectedNodeID"/>
            </devtools-mainpane>
            <devtools-sidepane>
                <InfoComponent vNode="selectedNode"/>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <!-- INSPECTOR.Tree -->
    <devtools-node t-name="TreeComponent"
        t-att-class="{
            element: props.vNode.length and !props.vNode.char,
            folded: state.folded,
            root: props.isRoot,
            'self-closing': props.vNode.length == 0,
        }"
        tabindex="1"
        t-on-keydown="onKeydown"
        t-on-node-selected="selectNode">
        <t t-if="props.isRoot">
            <span class="element-name selectable-line"
                t-on-click="onClickNode" t-on-dblclick="onDblClickNode"
                t-att-class="{
                    selected: props.selectedID == props.vNode.id,
                }">root</span>
            <t t-call="treeChildren"/>
        </t>
        <t t-else="">
            <span t-if="props.vNode.type == 'marker'"
                t-on-click="onClickNode" t-on-dblclick="onDblClickNode"
                class="selectable-line range-node" t-att-class="{
                    selected: props.selectedID == props.vNode.id,
                }">
                <b><t t-esc="repr"/></b>
            </span>
            <span t-elif="props.vNode.char" t-on-click="onClickNode"
                t-on-dblclick="onDblClickNode"
                class="selectable-line" t-att-class="{
                    bold: props.vNode.bold,
                    italic: props.vNode.italic,
                    underline: props.vNode.underline,
                    selected: props.selectedID == props.vNode.id,
                }">
                <t t-esc="repr"/>
            </span>
            <t t-else="">
                <span class="element-name selectable-line" t-on-click="onClickNode"
                    t-on-dblclick="onDblClickNode"
                    t-att-class="{
                        bold: props.vNode.bold,
                        italic: props.vNode.italic,
                        underline: props.vNode.underline,
                        selected: props.selectedID == props.vNode.id,
                        'line-break': props.vNode.htmlTag === 'BR',
                    }">
                    <t t-esc="repr"/>
                </span>
                <t t-call="treeChildren"/>
            </t>
        </t>
    </devtools-node>

    <t t-name="treeChildren">
        <div class="children">
            <TreeComponent t-if="!state.folded"
                t-foreach="props.vNode._children" t-as="child"
                t-key="child.id"
                vNode="child"
                selectedPath="props.selectedPath"
                selectedID="props.selectedID"/>
        </div>
    </t>

    <!-- INSPECTOR.Path -->
    <devtools-path t-name="PathComponent">
        <devtools-pathnode t-foreach="props.path" t-as="vNode"
            t-key="vNode.id"
            t-att-class="{
                selected: vNode.id == props.selectedID
            }"
            t-on-click="selectNode(vNode)">
            <t t-esc="getNodeRepr(vNode)"/>
        </devtools-pathnode>
    </devtools-path>

    <!-- INSPECTOR.Info -->
    <devtools-info t-name="InfoComponent">
        <devtools-navbar>
            <button t-on-click="openTab('vNode')" t-att-class="{
                selected: state.currentTab == 'vNode',
            }">VNode</button>
            <button t-on-click="openTab('selection')" t-att-class="{
                selected: state.currentTab == 'selection',
            }">Selection</button>
        </devtools-navbar>
        <t t-call="infoVNode" t-if="state.currentTab == 'vNode'"/>
        <t t-call="infoSelection" t-if="state.currentTab == 'selection'"/>
    </devtools-info>

    <!-- INSPECTOR.Info.vNode -->
    <t t-name="infoVNode">
        <div class="about">
            <span class="type"><t t-esc="className(props.vNode)"/></span> <t t-esc="props.vNode.type or &quot;?&quot;"/>
            <t t-if="props.vNode.char">:
                "<t t-esc="props.vNode.char"/>"
            </t>
            <span class="id"><t t-esc="props.vNode.id"/></span>
        </div>
        <div class="properties">
            <div class="divider">ðŸ‘¤ About me</div>
            <table>
                <tbody>
                    <tr t-foreach="aboutMeProps" t-as="propName" t-key="propName_index">
                        <td><t t-esc="propName"/></td>
                        <td><t t-esc="propRepr(props.vNode, propName)"/></td>
                    </tr>
                    <tr>
                        <td>total length</td>
                        <td><t t-esc="totalLength(props.vNode)"/></td>
                    </tr>
                </tbody>
            </table>
            <div class="divider">ðŸ“– My Properties</div>
            <table>
                <tbody>
                    <tr t-foreach="nodeProperties(props.vNode)" t-as="prop" t-key="prop_index">
                        <td><t t-esc="prop.key"/></td>
                        <td><t t-esc="prop.value"/></td>
                    </tr>
                </tbody>
            </table>
            <div class="divider">ðŸ‘ª My Family</div>
            <table>
                <tbody>
                    <tr t-foreach="familyProps" t-as="propName"
                    t-key="propName_index">
                        <td><t t-esc="propName"/></td>
                        <td t-if="propName === 'parent'" t-on-click="selectNode(props.vNode.parent)">
                            <t t-esc="propRepr(props.vNode, propName)"/>
                        </td>
                        <td t-elif="propName === 'siblings'">
                            <ol style="list-style-type: none">
                                <li t-if="props.vNode.previousSibling()"
                                    t-on-click="selectNode(props.vNode.previousSibling())">
                                    previous: <t t-esc="props.vNode.previousSibling().type or &quot;?&quot;"/>
                                </li>
                                <li t-else="">previous: none</li>
                                <li t-if="props.vNode.nextSibling()"
                                    t-on-click="selectNode(props.vNode.nextSibling())">
                                    next: <t t-esc="props.vNode.nextSibling().type or &quot;?&quot;"/>
                                </li>
                                <li t-else="">next: none</li>
                            </ol>
                        </td>
                        <td t-elif="propName === 'children'">
                            <ol t-if="props.vNode.children.length">
                                <li t-foreach="props.vNode.children"
                                    t-as="child" t-key="child.id"
                                    t-on-click="selectNode(child)">
                                    <t t-esc="child.type or &quot;?&quot;"/>
                                </li>
                            </ol>
                            <t t-else="">none</t>
                        </td>
                        <td t-else=""><t t-esc="propRepr(props.vNode, propName)"/></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </t>

    <!-- INSPECTOR.Info.selection -->
    <t t-name="infoSelection">
        <div class="about">
            <span class="type">VRange</span> Selection
        </div>
        <div class="properties">
            <div class="divider">ðŸ‘¤ About me</div>
            <table>
                <tbody>
                    <tr>
                        <td>direction</td>
                        <td><t t-esc="env.editor.vDocument.range.direction"/></td>
                    </tr>
                    <tr>
                        <td><strong class="range-node"><t
                        t-if="env.editor.vDocument.range.start === env.editor.vDocument.range.anchor">[</t><t
                        t-else="">]</t></strong> start</td>
                        <td><t t-esc="_repr(env.editor.vDocument.range.start)"/></td>
                    </tr>
                    <tr>
                        <td><strong class="range-node"><t
                        t-if="env.editor.vDocument.range.end === env.editor.vDocument.range.focus">]</t><t
                        t-else="">[</t></strong> end</td>
                        <td><t t-esc="_repr(env.editor.vDocument.range.end)"/></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </t>

    <devtools-panel t-name="CommandsComponent"
        t-att-class="{active: props.isOpen}" tabindex="1"
        t-on-keydown="onKeydown">
        <devtools-contents t-if="props.isOpen">
            <t t-set="handlers" t-value="state.handlers[state.selectedCommandIdentifier]"/>
            <devtools-mainpane style="overflow: hidden">
                <devtools-navbar>
                    <button t-on-click="openTab('queue')" t-att-class="{
                        selected: state.currentTab == 'queue',
                    }">Queue</button>
                    <button t-on-click="openTab('registry')" t-att-class="{
                        selected: state.currentTab == 'registry',
                    }">Registry</button>
                </devtools-navbar>
                <mainpane-contents t-if="state.currentTab == 'queue'" style="overflow: auto">
                    <table style="width: 100%;">
                        <tbody>
                            <tr t-foreach="Array.from(props.commands.keys()).reverse()" t-as="commandIndex"
                                t-key="commandIndex_index" class="selectable-line"
                                t-att-class="{
                                    selected: state.selectedCommandIndex == commandIndex,
                                }"
                                t-on-click="selectCommandByIndex(commandIndex)">
                                <td><t t-esc="props.commands[commandIndex][0]"/></td>
                            </tr>
                        </tbody>
                    </table>
                </mainpane-contents>
                <mainpane-contents t-elif="state.currentTab == 'registry'" style="overflow: auto">
                    <div t-foreach="Object.keys(state.registry)" t-as="commandIdentifier"
                        t-key="record_index" class="selectable-line"
                        t-att-class="{
                            selected: state.selectedCommandIdentifier == commandIdentifier,
                        }"
                        t-on-click="selectCommand(commandIdentifier)">
                        <t t-esc="commandIdentifier"/>
                    </div>
                </mainpane-contents>
            </devtools-mainpane>
            <devtools-sidepane>
                <devtools-info t-if="state.currentTab == 'queue'">
                    <t t-set="selectedCommand" t-value="props.commands[state.selectedCommandIndex]"/>
                    <div class="about" t-if="selectedCommand">
                        <span class="type">Command</span> <t t-esc="selectedCommand[0]"/>
                    </div>
                    <div class="properties" t-if="selectedCommand">
                        <div class="divider">Arguments</div>
                        <div class="properties">
                            <t t-if="selectedCommand">
                                <t t-set="payload" t-value="selectedCommand[1]"/>
                                <t t-call="commandArgs"/>
                            </t>
                            <t t-call="commandHandlers"/>
                        </div>
                    </div>
                </devtools-info>
                <devtools-info t-elif="state.currentTab == 'registry'">
                    <t t-if="state.registry">
                        <div class="about" t-if="state.selectedCommandIdentifier">
                            <span class="type">Command</span> <t t-esc="state.selectedCommandIdentifier"/>
                        </div>
                        <div class="properties" t-if="state.selectedCommandIdentifier">
                            <t t-call="commandHandlers"/>
                        </div>
                    </t>
                </devtools-info>
            </devtools-sidepane>
        </devtools-contents>
    </devtools-panel>

    <t t-name="commandArgs">
        <table>
            <tbody>
                <tr t-foreach="Object.keys(payload)" t-as="key" t-key="key_index">
                    <t t-set="value" t-value="payload[key]"/>
                    <td>
                        <t t-esc="key"/>
                    </td>
                    <td>
                        <t t-if="value and key == 'vRange'" t-call="payloadVRange"/>
                        <t t-else=""><t t-esc="formatPayloadValue(value)"/></t>
                    </td>
                </tr>
            </tbody>
        </table>
    </t>

    <t t-name="payloadVRange">
        <table>
            <tbody>
                <tr>
                    <td>
                        direction
                    </td>
                    <td>
                        <t t-esc="value.direction or 'unset'"/>
                    </td>
                </tr>
                <tr>
                    <td>
                        start
                    </td>
                    <td>
                        <t t-esc="value.startPosition"/> <t t-esc="value.start.id"/> (<t t-esc="value.start.value or value.start.type"/>)
                    </td>
                </tr>
                <tr>
                    <td>
                        end
                    </td>
                    <td>
                        <t t-esc="value.endPosition"/> <t t-esc="value.end.id"/> (<t t-esc="value.end.value or value.end.type"/>)
                    </td>
                </tr>
            </tbody>
        </table>
    </t>

    <t t-name="commandHandlers">
        <div class="divider" t-if="handlers">Handlers</div>
        <table t-if="handlers">
            <tbody>
                <tr t-foreach="handlers"
                    t-as="handler" t-key="handler_index"
                    class="selectable-line"
                    t-att-class="{
                        selected: state.selectedHandlerIndex == handlerIndex,
                    }">
                    <td><t t-esc="handler.name"/></td>
                    <td><t t-esc="handler"/></td>
                </tr>
            </tbody>
        </table>
    </t>

    <!-- MAIN -->
    <jw-devtools t-name="devtools"
        t-att-class="{
            closed: state.closed,
        }"
        t-attf-style="height: {{state.height}}px"
        tabindex="2">
        <devtools-navbar
            t-on-click="toggleClosed"
            t-on-mousedown="startResize">
            <button t-on-click="openTab('inspector')" t-att-class="{
                selected: state.currentTab == 'inspector',
            }">Inspector</button>
            <button t-on-click="openTab('commands')" t-att-class="{
                selected: state.currentTab == 'commands',
            }">Commands</button>
        </devtools-navbar>
        <t t-if="!state.closed">
            <InspectorComponent isOpen="state.currentTab == 'inspector'"/>
            <CommandsComponent isOpen="state.currentTab == 'commands'"
                commands="state.commands"/>
        </t>
    </jw-devtools>

</templates>
